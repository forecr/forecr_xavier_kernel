/*
 * Copyright (c) 2017-2022, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef __NVGPU_THREAD_LINUX_H__
#define __NVGPU_THREAD_LINUX_H__

#include <nvgpu/atomic.h>

struct task_struct;

struct nvgpu_thread {
	struct task_struct *task;
	nvgpu_atomic_t running;
	int (*fn)(void *);
	void *data;
};

/**
 * @brief Create a thread with RT priority.
 *
 * @param thread [in]		Thread to create.
 * @param data [in]		Data to pass to threadfn.
 * @param threadfn [in]		Thread function.
 * @param priority [in]		Priority of the thread to be created.
 * @param name [in]		Name of the thread.
 *
 * In Linux, kernel doesn't provide a way to set any arbitrary priority.
 * There are two main kinds of priority that can be set.
 * sched_set_fifo() and sched_set_fifo_lo().
 *
 * sched_set_fifo() is used to set the thread's priority to MAX_RTPRIORITY/2
 * This is the priority used by threaded interrupts internally as well.
 *
 * sched_set_fifo_lo() sets the thread's priority to 1. This sets the
 * current thread's RT priority to be 1(higher than other regular kernel threads).
 *
 * Normally Linux uses a CFS based scheduler which prioritizes processes
 * based on increasing order of actual time spent. This adds a kind of
 * non-determinisim for processes. In Linux, RT scheduling classes have
 * a higher rank compared to regular threads with CFS scheduler. Thus,
 * there is a guarantee to pick RT threads deterministically before
 * other non-RT threads.
 *
 * For more reference, refer to this article
 * https://lwn.net/Articles/818388/.
 *
 *
 * @return Return 0 on success, else return the error number to indicate the
 * error. The error numbers returned are generated by the OS APIs invoked
 * internally by this function.
 *
 * start routine provided for thread creation.
 */
int nvgpu_thread_create_priority(struct nvgpu_thread *thread,
			void *data, int (*threadfn)(void *data),
			int priority, const char *name);

#endif /* __NVGPU_THREAD_LINUX_H__ */

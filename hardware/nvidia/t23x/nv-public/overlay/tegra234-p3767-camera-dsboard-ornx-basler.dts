// SPDX-License-Identifier: GPL-2.0-only
// SPDX-FileCopyrightText: Copyright (c) 2023-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.

/dts-v1/;
/plugin/;

#include <dt-bindings/tegra234-p3767-0000-common.h>
#include <dt-bindings/clock/tegra234-clock.h>
#include <dt-bindings/gpio/tegra234-gpio.h>

#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)

/ {
	overlay-name = "DSBOARD-ORNX Basler 4*2-lane";
	jetson-header-name = "Jetson 24pin CSI Connector";
	compatible = JETSON_COMPATIBLE_P3768;

	fragment-camera@0 {
		target-path = "/";
		__overlay__ {

	tegra-capture-vi  {
		num-channels = <4>;
		ports {
			#address-cells = <1>;
			#size-cells = <0>;
			port@0 {
				status = "okay";
				reg = <0>;
				dsboard_ornx_vi_in0: endpoint {
					status = "okay";
					port-index = <0>;
					bus-width = <2>;
					remote-endpoint = <&dsboard_ornx_csi_out0>;
				};
			};
			port@1 {
				status = "okay";
				reg = <1>;
				dsboard_ornx_vi_in1: endpoint {
					status = "okay";
					port-index = <1>;
					bus-width = <2>;
					remote-endpoint = <&dsboard_ornx_csi_out1>;
				};
			};
			port@2 {
				status = "okay";
				reg = <2>;
				dsboard_ornx_vi_in2: endpoint {
					status = "okay";
					port-index = <2>;
					bus-width = <2>;
					remote-endpoint = <&dsboard_ornx_csi_out2>;
				};
			};
			port@3 {
				status = "okay";
				reg = <3>;
				dsboard_ornx_vi_in3: endpoint {
					status = "okay";
					port-index = <3>;
					bus-width = <2>;
					remote-endpoint = <&dsboard_ornx_csi_out3>;
				};
			};
		};
	};

	bus@0 {
		host1x@13e00000 {
			nvcsi@15a00000 {
				num-channels = <4>;
				#address-cells = <1>;
				#size-cells = <0>;
				status = "okay";
				channel@0 {
					status = "okay";
					reg = <0>;
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							status = "okay";
							reg = <0>;
							dsboard_ornx_csi_in0: endpoint@0 {
								status = "okay";
								port-index = <0>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_ornx_basler_out0>;
							};
						};
						port@1 {
							status = "okay";
							reg = <1>;
							dsboard_ornx_csi_out0: endpoint@1 {
								status = "okay";
								remote-endpoint = <&dsboard_ornx_vi_in0>;
							};
						};
					};
				};
				channel@1 {
					status = "okay";
					reg = <1>;
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							status = "okay";
							reg = <0>;
							dsboard_ornx_csi_in1: endpoint@2 {
								status = "okay";
								port-index = <1>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_ornx_basler_out1>;
							};
						};
						port@1 {
							status = "okay";
							reg = <1>;
							dsboard_ornx_csi_out1: endpoint@3 {
								status = "okay";
								remote-endpoint = <&dsboard_ornx_vi_in1>;
							};
						};
					};
				};
				channel@2 {
					status = "okay";
					reg = <2>;
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							status = "okay";
							reg = <0>;
							dsboard_ornx_csi_in2: endpoint@4 {
								status = "okay";
								port-index = <2>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_ornx_basler_out2>;
							};
						};
						port@1 {
							status = "okay";
							reg = <1>;
							dsboard_ornx_csi_out2: endpoint@5 {
								status = "okay";
								remote-endpoint = <&dsboard_ornx_vi_in2>;
							};
						};
					};
				};
				channel@3 {
					status = "okay";
					reg = <3>;
					ports {
						#address-cells = <1>;
						#size-cells = <0>;
						port@0 {
							status = "okay";
							reg = <0>;
							dsboard_ornx_csi_in3: endpoint@6 {
								status = "okay";
								port-index = <3>;
								bus-width = <2>;
								remote-endpoint = <&dsboard_ornx_basler_out3>;
							};
						};
						port@1 {
							status = "okay";
							reg = <1>;
							dsboard_ornx_csi_out3: endpoint@7 {
								status = "okay";
								remote-endpoint = <&dsboard_ornx_vi_in3>;
							};
						};
					};
				};
			};
		};

		i2c@3180000 {
			pca9544a_70: pca9544a@70 {
				status = "okay";
				force_bus_start = <CAMERA_I2C_MUX_BUS(0)>;

				i2c@0 {
					reg = <0>;
					i2c-mux,deselect-on-exit;
					#address-cells = <1>;
					#size-cells = <0>;

					basler_a@36 {
						status = "okay";

						compatible = "basler,basler-camera";
						/* I2C device address */
						reg = <0x36>;

						/* V4L2 device node location */
						// devnode is deprecated
						//devnode = "video0";

						/* Physical dimensions of sensor */
						physical_w = "3.680";
						physical_h = "2.760";

						sensor_model = "basler-mcm";

						mode0 {
							tegra_sinterface = "serial_a";
							lane_polarity = "6";
						};

						ports {
							#address-cells = <1>;
							#size-cells = <0>;

							port@0 {
								status = "okay";
								reg = <0>;
								dsboard_ornx_basler_out0: endpoint {
									status = "okay";
									port-index = <0>;
									bus-width = <2>;
									remote-endpoint = <&dsboard_ornx_csi_in0>;
									data-lanes = <1 2>;
									clock-lanes = <0>;
									link-frequencies = /bits/ 64 <600000000>;
								};
							};
						};
					};
				};

				i2c@1 {
					reg = <1>;
					i2c-mux,deselect-on-exit;
					#address-cells = <1>;
					#size-cells = <0>;

					basler_b@36 {
						status = "okay";

						compatible = "basler,basler-camera";
						/* I2C device address */
						reg = <0x36>;

						/* V4L2 device node location */
						// devnode is deprecated
						//devnode = "video1";

						/* Physical dimensions of sensor */
						physical_w = "3.680";
						physical_h = "2.760";

						sensor_model = "basler-mcm";

						mode0 {
							tegra_sinterface = "serial_b";
							lane_polarity = "6";
						};

						ports {
							#address-cells = <1>;
							#size-cells = <0>;

							port@0 {
								reg = <0>;
								dsboard_ornx_basler_out1: endpoint {
									port-index = <1>;
									bus-width = <2>;
									remote-endpoint = <&dsboard_ornx_csi_in1>;
									data-lanes = <1 2>;
									clock-lanes = <0>;
									link-frequencies = /bits/ 64 <600000000>;
								};
							};
						};
					};
				};

				i2c@2 {
					reg = <2>;
					i2c-mux,deselect-on-exit;
					#address-cells = <1>;
					#size-cells = <0>;

					basler_c@36 {
						status = "okay";

						compatible = "basler,basler-camera";
						/* I2C device address */
						reg = <0x36>;

						/* V4L2 device node location */
						// devnode is deprecated
						//devnode = "video2";

						/* Physical dimensions of sensor */
						physical_w = "3.680";
						physical_h = "2.760";

						sensor_model = "basler-mcm";

						mode0 {
							tegra_sinterface = "serial_c";
							lane_polarity = "0";
						};

						ports {
							#address-cells = <1>;
							#size-cells = <0>;

							port@0 {
								reg = <0>;
								dsboard_ornx_basler_out2: endpoint {
									port-index = <2>;
									bus-width = <2>;
									remote-endpoint = <&dsboard_ornx_csi_in2>;
									data-lanes = <1 2>;
									clock-lanes = <0>;
									link-frequencies = /bits/ 64 <600000000>;
								};
							};
						};
					};
				};

				i2c@3 {
					reg = <3>;
					i2c-mux,deselect-on-exit;
					#address-cells = <1>;
					#size-cells = <0>;

					basler_d@36 {
						status = "okay";

						compatible = "basler,basler-camera";
						/* I2C device address */
						reg = <0x36>;

						/* V4L2 device node location */
						// devnode is deprecated
						//devnode = "video3";

						/* Physical dimensions of sensor */
						physical_w = "3.680";
						physical_h = "2.760";

						sensor_model = "basler-mcm";

						mode0 {
							tegra_sinterface = "serial_d";
							lane_polarity = "0";
						};

						ports {
							#address-cells = <1>;
							#size-cells = <0>;

							port@0 {
								reg = <0>;
								dsboard_ornx_basler_out3: endpoint {
									port-index = <3>;
									bus-width = <2>;
									remote-endpoint = <&dsboard_ornx_csi_in3>;
									data-lanes = <1 2>;
									clock-lanes = <0>;
									link-frequencies = /bits/ 64 <600000000>;
								};
							};
						};
					};
				};
			};
		};
	};

	tegra-camera-platform {
		compatible = "nvidia, tegra-camera-platform";
		/**
		* Physical settings to calculate max ISO BW
		*
		* num_csi_lanes = <>;
		* Total number of CSI lanes when all cameras are active
		*
		* max_lane_speed = <>;
		* Max lane speed in Kbit/s
		*
		* min_bits_per_pixel = <>;
		* Min bits per pixel
		*
		* vi_peak_byte_per_pixel = <>;
		* Max byte per pixel for the VI ISO case
		*
		* vi_bw_margin_pct = <>;
		* Vi bandwidth margin in percentage
		*
		* max_pixel_rate = <>;
		* Max pixel rate in Kpixel/s for the ISP ISO case
		*
		* isp_peak_byte_per_pixel = <>;
		* Max byte per pixel for the ISP ISO case
		*
		* isp_bw_margin_pct = <>;
		* Isp bandwidth margin in percentage
		*/
		num_csi_lanes = <8>;
		max_lane_speed = <1500000>;
		min_bits_per_pixel = <10>;
		vi_peak_byte_per_pixel = <2>;
		vi_bw_margin_pct = <25>;
		max_pixel_rate = <240000>;
		isp_peak_byte_per_pixel = <5>;
		isp_bw_margin_pct = <25>;

		/**
		 * The general guideline for naming badge_info contains 3 parts, and is as follows,
		 * The first part is the camera_board_id for the module; if the module is in a FFD
		 * platform, then use the platform name for this part.
		 * The second part contains the position of the module, ex. "rear" or "front".
		 * The third part contains the last 6 characters of a part number which is found
		 * in the module's specsheet from the vendor.
		 */
		modules {
			module0 {
				status = "okay";
				badge = "dsboard_ornx_bottomleft";
				position = "bottomleft";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					sysfs-device-tree = "/sys/firmware/devicetree/base/bus@0/i2c@3180000/pca9544a@70/i2c@0/basler_a@36";
				};
			};
			module1 {
				status = "okay";
				badge = "dsboard_ornx_centerleft";
				position = "centerleft";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					sysfs-device-tree = "/sys/firmware/devicetree/base/bus@0/i2c@3180000/pca9544a@70/i2c@1/basler_b@36";
				};
			};
			module2 {
				status = "okay";
				badge = "dsboard_ornx_centerright";
				position = "centerright";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					sysfs-device-tree = "/sys/firmware/devicetree/base/bus@0/i2c@3180000/pca9544a@70/i2c@2/basler_c@36";
				};
			};
			module3 {
				status = "okay";
				badge = "dsboard_ornx_topleft";
				position = "topleft";
				orientation = "1";
				drivernode0 {
					status = "okay";
					pcl_id = "v4l2_sensor";
					sysfs-device-tree = "/sys/firmware/devicetree/base/bus@0/i2c@3180000/pca9544a@70/i2c@3/basler_d@36";
				};
			};
		};
	};

		}; //__overlay__ ends
	}; //fragment-camera@0 ends
};
